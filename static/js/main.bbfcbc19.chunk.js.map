{"version":3,"sources":["components/Home.js","reportWebVitals.js","index.js"],"names":["Home","props","useState","match","params","postcode","setPostcode","validated","setValidate","postcodeInfo","setPostcodeInfo","postcodeInfoNearset","setpostcodeInfoNearset","useEffect","undefined","updatePostCode","length","test","fetch","then","response","json","responseJson","catch","error","console","getPostCodeInfo","getNearestLocationList","list","Object","keys","result","forEach","eachLocation","push","Row","className","Col","md","country","region","type","name","onChange","event","target","value","defaultValue","Math","random","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","Switch","Route","path","component","document","getElementById"],"mappings":"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","file":"static/js/main.bbfcbc19.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport './Home.css';\r\nimport {Row, Col} from 'react-bootstrap';\r\n\r\nfunction Home(props) {\r\n  const [postcode, setPostcode] = useState(props.match.params.postcode);\r\n  const [validated, setValidate ] = useState('');\r\n  const [postcodeInfo, setPostcodeInfo ] = useState({});\r\n  const [postcodeInfoNearset, setpostcodeInfoNearset ] = useState({});\r\n\r\n  useEffect(()=> {\r\n    if(props.match.params.postcode !== undefined) {\r\n      setPostcode(props.match.params.postcode);\r\n      updatePostCode(props.match.params.postcode);\r\n    }\r\n  }, [postcode]);\r\n\r\n  const getPostCodeInfo = (postcode) => {\r\n    fetch('http://api.postcodes.io/postcodes/' + postcode)\r\n      .then((response) => response.json())\r\n      .then((responseJson) => {\r\n          setPostcodeInfo(responseJson);\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n      });\r\n    fetch('http://api.postcodes.io/postcodes/' + postcode + '/nearest/')\r\n      .then((response) => response.json())\r\n      .then((responseJson) => {\r\n          setpostcodeInfoNearset(responseJson);\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n      });\r\n  };\r\n\r\n  const updatePostCode = (postcode) => {\r\n    let postcodeRegEx = /([Gg][Ii][Rr] 0[Aa]{2})|((([A-Za-z][0-9]{1,2})|(([A-Za-z][A-Ha-hJ-Yj-y][0-9]{1,2})|(([AZa-z][0-9][A-Za-z])|([A-Za-z][A-Ha-hJ-Yj-y][0-9]?[A-Za-z])))) [0-9][A-Za-z]{2})$/gm;\r\n    setValidate('');\r\n    if (postcode.length >= 6 && postcode.length <=8) {\r\n      if (postcodeRegEx.test(postcode)) {\r\n        setValidate(true);\r\n        setPostcode(postcode);\r\n        getPostCodeInfo(postcode);\r\n        return true;\r\n      } else {\r\n        setValidate(false);\r\n        return false;\r\n      }\r\n    } else if (postcode.length > 8) {\r\n      setValidate(false);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  const getPostCodeDetails = () => {\r\n    return (\r\n      <Row key={Math.random}>\r\n        <Col md={4} className=\"detailsContainer details\">\r\n          <div><h3>Details</h3></div>\r\n          <div>Country : {postcodeInfo.result.country}</div>\r\n          <div>Region : {postcodeInfo.result.region}</div>\r\n        </Col>\r\n        <Col md={7} className=\"detailsContainer\">\r\n          <div><h3>Nearest Locations</h3></div>\r\n            <Row className=\"elementContainer\">\r\n              <Col md={4} className=\"elementElement\">Postcode</Col>\r\n              <Col md={4} className=\"element\">Country</Col>\r\n              <Col md={4}>Region</Col>\r\n            </Row>\r\n            {getNearestLocationList()}\r\n        </Col>\r\n      </Row>\r\n    );\r\n  }\r\n\r\n  const getNearestLocationList = () => {\r\n    const list = [];\r\n    if (Object.keys(postcodeInfoNearset).length > 0) {\r\n        postcodeInfoNearset.result.forEach((eachLocation) => {\r\n          if (eachLocation.postcode !== postcodeInfo.result.postcode) {\r\n            list.push(<Row className=\"elementContainer\">\r\n              <Col md={4} className=\"element\">{eachLocation.postcode}</Col>\r\n              <Col md={4} className=\"element\">{eachLocation.country}</Col>\r\n              <Col md={4}>{eachLocation.region}</Col>\r\n            </Row>)\r\n          }\r\n        });\r\n    }\r\n    return(<div className=\"nearestDetailsContainer\">{list}</div>);\r\n  };\r\n\r\n  return(\r\n    <div className=\"mainHome\">\r\n      <Row className=\"mainHeader\">\r\n        <Col className=\"header\">\r\n          <h1>Location Finder</h1>\r\n        </Col>\r\n      </Row>\r\n      <div className=\"mainContent\">\r\n        <Row className=\"contentList\" >\r\n          <Col md={3}/>\r\n          <Col md={2} className=\"labelContainer\">Enter Post Code: </Col>\r\n          <Col md={4} className=\"inputContainer\">\r\n            <input type=\"text\" name=\"postcode\" onChange={(event)=> updatePostCode(event.target.value)} defaultValue={postcode}/>\r\n            {validated === true && <span className='validate valid'>Valid</span>}\r\n            {validated === false && <span className='validate invalid'>Invalid</span>}\r\n          </Col>\r\n          <Col md={3}/>\r\n        </Row>\r\n        {(validated === true && Object.keys(postcodeInfo).length > 0 && Object.keys(postcodeInfoNearset).length > 0 ) && getPostCodeDetails()}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Home;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Home from './components/Home';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {BrowserRouter as Router , Route, Switch} from 'react-router-dom';\n\n\nReactDOM.render(\n  <Router>\n    <Switch>\n      <Route path=\"/:postcode?\" component={Home} />\n    </Switch>\n  </Router>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}